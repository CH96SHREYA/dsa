
// Program to arrange +ve and -ve no. in alternate fashion in O(1) space complexity
public class Main
{
    public static void swap(int []A,int i,int j){
        int temp=A[i];
        A[i]=A[j];
        A[j]=temp;
    }
    
    public static void printArray(int [] A){
        for(int elem:A)
            System.out.print(elem+" ");
    }
    
    public static  void arrangeAlternate(int [] A){
        int n=A.length;
        // Arrange +ve no. in the left and -ve in the right;
        int i=0;int j=n;
        while(i<j){
            //Find the index of the -ve no.from the left that is a no. is +ve keep moving
                while(A[++i]>=0);
                
             //Find the index of the +ve no.from the right that is a no. is -ve keep moving
                while(A[--j]<0);
            
             //swap the two (-ve no. in the left ) with the (+ve no. in the right)
                if(i<j)
                    swap(A,i,j);
        }
        System.out.println("Arranged at the ends");
        printArray(A); // The no. are arrranged at the ends 
        
        
        //i has the index of first negative no. 
        // i=0 means all no. are -ve  and i=n means all no. are +ve
        
        if(i==0||i==n)
            System.out.println("Invalid");
        int k=0; //Hold the indices of +ve no.
        while(k<n && i<n){
            swap(A,k,i);
            k=k+2; // -ve no. are to be brought at alternate positions
            i++; // pick the next -ve no. 
        }
        System.out.println("Alternate arranged");    
        printArray(A);
    }
    
	public static void main(String[] args) {
	 int 	arr[] = {10, 4, -3,-5, -50, 23, 90,12,-44,-45,67,0,66};
	 System.out.println("Input array");
	 printArray(arr);
	  arrangeAlternate(arr);
		
	}
}
